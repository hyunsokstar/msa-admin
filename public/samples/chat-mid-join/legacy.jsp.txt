<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		<%@ taglib prefix="spr" uri="http://www.springframework.org/tags" %>
			<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
				<%@ taglib prefix="sf" uri="http://www.springframework.org/tags/form" %>
					<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
						<%@ page import="com.sles.core.util.ConstantsWeb" %>
							<%@ page import="com.sles.admin.util.SessionUtil" %>


								<jsp:include page="/WEB-INF/jsp/common/header.jsp" />

								<script type="text/javascript" src="/resource/js/sockjs.min.js"></script>

								<!-- Page Content-->
								<div class="page-content">

									<div class="container-fluid">
										<!-- Page-Title -->
										<div class="row">
											<div class="col-sm-12">
												<div class="page-title-box">
													<h4 class="page-title" onclick="history.go(0)">
														<spr:message code="vscmomc" />
														<!-- 여기가 타이틀? -->
													</h4>
													<div class="d-flex align-items-center">
														<div class="form-inline refresh mr-6">
															<div class="custom-control custom-switch switch-primary">
																<%-- <input type="checkbox" class="custom-control-input"
																	id="refresh_start_btn">
																	<label class="custom-control-label"
																		for="refresh_start_btn">
																		<spr:message code="common.refresh" />
																	</label>
																	--%>
															</div>
														</div>
														<div class="form-inline">
															<label for="cmb_branch_code" class="mr-3">
																<spr:message code="common.branch.sel" />
															</label>
															<select class="form-control" name="cmb_branch_code"
																id="cmb_branch_code" aria-haspoup="true"
																aria-expended="false">
																<c:if test="${!empty sel_branch_code }">
																	<c:forEach var="list" items="${sel_branch_code }"
																		varStatus="status">
																		<option value="${list.code}">${list.name}
																		</option>
																	</c:forEach>
																</c:if>
															</select>
														</div>
													</div>

												</div><!--end page-title-box-->
											</div><!--end col-->
										</div>
										<!-- end page title end breadcrumb -->

										<div class="row">
											<div class="col-md-4">
												<div class="card report-card">
													<div class="card-body">
														<div class="right-icon">
															<i class="ri-user-settings-line main-icon"></i>
														</div>
														<h4 class="header-title leftStick">
															<spr:message code="dash.channel.system" />
														</h4>
														<h3 class="mt-3 mb-0" id="systemCount">00</h3>
													</div>
												</div>
											</div>
											<div class="col-md-4">
												<div class="card report-card">
													<div class="card-body">
														<div class="right-icon">
															<i class="ri-user-voice-line main-icon"></i>
														</div>
														<h4 class="header-title leftStick">
															<spr:message code="dash.channel.used" />
														</h4>
														<h3 class="mt-3 mb-0" id="usedCount">00</h3>
													</div>
												</div>
											</div>
											<div class="col-md-4">
												<div class="card report-card">
													<div class="card-body">
														<div class="right-icon">
															<i class="ri-contacts-line main-icon"></i>
														</div>
														<h4 class="header-title leftStick">
															<spr:message code="dash.channel.stanby" />
														</h4>
														<h3 class="mt-3 mb-0" id="stanbyCount">00</h3>
													</div>
												</div>
											</div>
										</div><!--end row-->

										<div class="row">
											<div class="col-md-12">
												<div class="card report-card">
													<div class="card-body">
														<div class="table-responsive">
															<!-- 안녕 여기가 테이블이야 ! -->
															<table class="table mb-0" id="channelTable">
																<thead class="thead-light">
																</thead>
															</table>
														</div>
													</div>
												</div>
											</div>
										</div><!-- end row -->


									</div><!-- container -->

								</div>
								<!-- end page content -->

								<!-- Bootstrap modal for popup window -->
								<div class="modal" id="myModal">
									<div class="modal-dialog">
										<div class="modal-content">
											<div class="modal-header">
												<h4 class="modal-title">Popup Window</h4>
												<button type="button" class="close"
													data-dismiss="modal">&times;</button>
											</div>
											<div class="modal-body">
												<!-- Popup window content -->
												<p>This is a movable popup window.</p>
											</div>
										</div>
									</div>
								</div>

								<script src="/resource/publishing/js/app.js"></script>
								<script type="text/javascript">
									/*
									 * [멀티채널 실시간 갱신 개요]
									 * - SockJS 는 '데이터 자체'를 받기보다는 "갱신 트리거" 신호용 (msg 내 'on') 으로 사용됨.
									 * - 실제 채널 목록/카운트 데이터는 getSocketData() 내부 AJAX (/admin/getSocketData_channel) 로 조회.
									 * - 주기적 새로고침/지점 변경/웹소켓 신호 모두 getSocketData() 를 재호출하여 동일 경로로 데이터 재수집.
									 */
									// [연결 생성] 실시간 갱신 트리거 수신을 위한 SockJS 세션 생성 (websocket 우선, 불가 시 xhr-streaming/xhr-polling 폴백)
									let sockJs = new SockJS("/ws_multi_channel", null, { transports: ["websocket", "xhr-streaming", "xhr-polling"] }); // 웹소켓 + 폴백 연결 생성 (구독 객체)
									//let sockJs = new SockJS("http://echo.websocket.org", null, {transports: ["websocket", "xhr-streaming", "xhr-polling"]}); // 예시(비활성)
									let channelTable;
									let timer_1;
									let refreshPlaying = false;
									let interTarget_1;

									$(document).ready(function () {
										sockJs.onopen = onOpen;      // [트리거 전송 시점] 연결 직후 서버에 초기 'on' 신호 전송
										sockJs.onmessage = onMessage; // [트리거 수신 시점] 서버에서 'on' 포함 메시지 → 재조회
										sockJs.onclose = onClose;     // 종료 이벤트 처리

										function onOpen(evt) { sockJs.send("on"); }     // [트리거 발동 요청] 서버에 'on' 신호 → 서버가 변경 발생 시 다시 push
										function onClose(evt) { sockJs.send("close"); } // 참고: 서버 측 정리 용도로 추정

										function onMessage(msg) {
											// [트리거 수신] msg.data 예: method_name+"&"+job_uuid+"&"+camp__seq
											// 'on' 포함 → 서버가 갱신 필요 알림 → AJAX 재호출
											if (msg.data && msg.data.includes("on")) {
												getSocketData(); // 실제 데이터는 웹소켓이 아닌 아래 AJAX 로 획득
											}
										}

										interTarget_1 = function () {
											// 주기적 interval 혹은 수동 새로고침 시 DataTables AJAX 재호출
											if (channelTable) channelTable.ajax.reload();
										}

										$('#cmb_branch_code option[value=' + getDootaStorage("cmb_branch_code") + ']').prop('selected', true);

										$("#refresh_start_btn").change(function () {
											event.preventDefault();
											intervalbundle();
										});

										$('#cmb_branch_code').on('change', function () {
											event.preventDefault();
											setDootaStorage("cmb_branch_code", $("#cmb_branch_code").val());
											getSocketData();
											intervalbundle();
										});
									});

									function intervalbundle() {
										if ($('#refresh_start_btn').prop('checked')) {
											timer_1 = intervalPlaying(interTarget_1, timer_1, 1);
										} else {
											timer_1 = intervalPlaying(interTarget_1, timer_1, 0);
										}
									}

									function getSystemChannels(row_number) {
										let mapparam = {};
										mapparam.cmb_branch_code = $("#cmb_branch_code").val();

										$.ajax({
											type: "POST",
											url: "/admin/vscmomc_datas",
											dataType: 'json',
											data: mapparam,
											beforeSend: function (xhr) { xhr.setRequestHeader(header, token); },
											success: function (data) {
												$('#systemCount').text(numberWithCommas(data.server_data.total));
												$('#usedCount').text(numberWithCommas(row_number));
												$('#stanbyCount').text(numberWithCommas(data.server_data.total - row_number));
											},
											error: function (jqXHR, textStatus, errorThrown) {
												if (confirm("Refresh? \n<spr:message code='info.exception'/> js:getSystemChannels \n" + errorMsgMaker(jqXHR, textStatus, errorThrown))) {
													location.reload(true);
												}
											}
										});
									}

									// TOFIX HS 0820 
									function getSocketData() {
										// 웹소켓 신호/지점 변경/타이머 모두 이 함수로 수렴 -> AJAX 로 목록 재수집
										getSystemChannels(); // 상단 카운트 (전체/사용/대기) 갱신을 위한 별도 호출
										let columns_type = [
											{ data: "no", title: '<spr:message code="common.no" />', class: "text-center" },
											{ data: "branchCode", title: '<spr:message code="common.branch" />' },
											{ data: "serverId", title: '<spr:message code="common.server" />' },
											{ data: "dnisName", title: '고객전화번호', render: function (data, type, row) { let v = row.dnisName; if (isEmptyCheck(v)) v = row.ani; return v; } },
											{ data: "channelNum", title: '<spr:message code="common.channel" />' },
											{ data: "startDate", title: '<spr:message code="common.startDate" />', render: function (d) { if (d.length > 19) return d.substring(0, 19); return d; } },
											{ data: "durTime", title: '<spr:message code="common.dur" />' },
											{ data: "consultStatus", title: '상담상태', render: function (d) { if (d === '0') return '<span class="text-success" style="font-size:1.5rem;cursor:pointer">&#9679;</span>'; if (d === '1') return '<span class="text-primary" style="font-size:1.5rem;cursor:pointer">&#9679;</span>'; return '<span class="text-danger" style="font-size:1.5rem;cursor:pointer">&#9679;</span>'; } },
											{ data: "svcName", title: '<spr:message code="common.svc.name" />', render: function (data, type, row) { let v = row.svcName; if (isEmptyCheck(v)) v = row.svccode; return v; } },
											{ data: "stepInYn", title: '상담사개입현황', render: function (d) { return d === 'Y' ? '상담사개입' : ''; } },
											{ data: "uuid", visible: false }
										];

										let domstyle = '<"float-right"f>rt<"row"<"col-sm-4"l><"col-sm-4"i><"col-sm-4"p>>';
										let mapparam = { cmb_branch_code: $("#cmb_branch_code").val() };

										$('#channelTable > thead, #channelTable > tbody, #channelTable').empty();

										channelTable = $('#channelTable').DataTable({ // DataTables 재초기화 (destroy:true) 후 데이터 바인딩
											destroy: true,
											ordering: false,
											paginate: false,
											autoWidth: false,
											searching: false,
											orderMulti: false,
											responsive: true,
											paging: false,
											info: false,
											processing: false,
											language: { emptyTable: "<spr:message code='camp.noData'/>" },
											dom: domstyle,
											ajax: { // 실제 채널 행 데이터 조회 (웹소켓이 아닌 REST 호출)
												url: "/admin/getSocketData_channel",
												type: "POST",
												dataType: "json",
												data: mapparam,
												beforeSend: function (xhr) { xhr.setRequestHeader(header, token); },
												error: function () { location.reload(true); }
											},
											columnDefs: [
												{ targets: 0, orderable: false, className: "text-center", render: function (data, type, row, meta) { return meta.row + meta.settings._iDisplayStart + 1; } },
												{ targets: ['_all'], className: "text-center" }
											],
											columns: columns_type,
											drawCallback: function (settings) { getSystemChannels(settings.aoData.length); }
										});
										channelTable.columns().header().to$().addClass("text-center");
									}

									// [상담상태(8번째 컬럼) 클릭 시 채팅창 팝업 열기 + 창 닫힐 때 stepInOut 상태 업데이트]
									$(document).on('click', '#channelTable tbody tr td:nth-child(8)', function () {
										let rowData = channelTable.row($(this).closest('tr')).data();
										let uuid = rowData.uuid;
										let uniqueWindowName = 'chatWindow_' + uuid;
										let chatWindow = window.open('/admin/vscmomc_chat?uuid=' + uuid + '&ani=' + rowData.ani, uniqueWindowName, 'top=0,left=0,width=500,height=600,toolbar=0,location=0,menubar=0,status=0');
										chatWindow.resizeTo(500, 600);
										chatWindow.onresize = () => { chatWindow.resizeTo(500, 600); };
										chatWindow.addEventListener('beforeunload', () => {
											let params = { conn_id: uuid, stepInYn: 'N' };
											$.ajax({
												method: 'POST',
												url: '/admin/stepInOut',
												data: JSON.stringify(params),
												contentType: 'application/json',
												dataType: 'json',
												beforeSend: function (xhr) { xhr.setRequestHeader(header, token); }
											});
										});
									});
								</script>


								</html>