<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Counter ÏôÑÎ≤Ω Ï†ïÎ¶¨ - Ï°¥ÎÇò Ïâ¨Ïö¥ 3Îã®Í≥Ñ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .subtitle {
            color: rgba(255,255,255,0.9);
            text-align: center;
            margin-bottom: 30px;
            font-size: 1.2em;
        }
        
        /* ÌïµÏã¨ 3Îã®Í≥Ñ Ïπ¥Îìú */
        .core-steps {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .step-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s;
        }
        
        .step-card:hover {
            transform: translateY(-5px);
        }
        
        .step-number {
            display: inline-block;
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 50%;
            text-align: center;
            line-height: 40px;
            font-weight: bold;
            font-size: 1.2em;
            margin-bottom: 15px;
        }
        
        .step-title {
            font-size: 1.3em;
            color: #333;
            margin-bottom: 15px;
            font-weight: bold;
        }
        
        .step-code {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            overflow-x: auto;
            margin-bottom: 10px;
        }
        
        .step-desc {
            color: #666;
            font-size: 0.95em;
            line-height: 1.6;
        }
        
        /* ÏôÑÏÑ± ÏΩîÎìú ÏÑπÏÖò */
        .complete-code {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .section-title {
            font-size: 1.8em;
            color: #333;
            margin-bottom: 20px;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
        }
        
        .code-block {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
            overflow-x: auto;
            margin-bottom: 20px;
            position: relative;
        }
        
        .code-label {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #667eea;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
        }
        
        /* ÎùºÏù¥Î∏å Îç∞Î™® */
        .demo-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .demo-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .demo-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
        }
        
        .btn-add {
            background: #28a745;
            color: white;
        }
        
        .btn-add:hover {
            background: #218838;
        }
        
        .btn-reset {
            background: #ffc107;
            color: #333;
        }
        
        .btn-reset:hover {
            background: #e0a800;
        }
        
        .btn-load {
            background: #007bff;
            color: white;
        }
        
        .btn-load:hover {
            background: #0056b3;
        }
        
        /* CSS Counter Ïã§Ï†ú Ï†ÅÏö© */
        .counter-container {
            counter-reset: item-counter;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            max-height: 400px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .counter-item {
            counter-increment: item-counter;
            display: flex;
            align-items: center;
            padding: 12px;
            margin: 8px 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s;
        }
        
        .counter-item:hover {
            transform: translateX(5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .counter-item::before {
            content: counter(item-counter) ". ";
            font-weight: bold;
            color: #667eea;
            font-size: 18px;
            margin-right: 15px;
            background: #f0f0ff;
            padding: 5px 10px;
            border-radius: 5px;
            min-width: 40px;
            text-align: center;
        }
        
        .user-info {
            flex: 1;
        }
        
        .delete-btn {
            padding: 6px 12px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .delete-btn:hover {
            background: #c82333;
        }
        
        /* ÏÑ±Îä• Ï†ïÎ≥¥ */
        .performance-info {
            background: linear-gradient(135deg, #f5f5f5, #e9ecef);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        
        .perf-item {
            text-align: center;
        }
        
        .perf-label {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }
        
        .perf-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }
        
        /* ÌïµÏã¨ Ìè¨Ïù∏Ìä∏ */
        .key-point {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            font-size: 1.1em;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .highlight {
            background: yellow;
            padding: 2px 5px;
            color: #333;
            border-radius: 3px;
            font-weight: bold;
        }
        
        /* ÎπÑÍµê ÌÖåÏù¥Î∏î */
        .comparison-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .comparison-table th {
            background: #667eea;
            color: white;
            padding: 12px;
            text-align: left;
        }
        
        .comparison-table td {
            padding: 12px;
            border: 1px solid #dee2e6;
        }
        
        .comparison-table tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .good {
            color: #28a745;
            font-weight: bold;
        }
        
        .bad {
            color: #dc3545;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ CSS Counter ÏôÑÎ≤Ω Ï†ïÎ¶¨</h1>
        <p class="subtitle">JSP 20,000Î™Ö Ïú†Ï†Ä Í¥ÄÎ¶¨ - "Ï°¥ÎÇò Ïâ¨Ïö¥" 3Îã®Í≥Ñ</p>
        
        <!-- ÌïµÏã¨ 3Îã®Í≥Ñ -->
        <div class="core-steps">
            <div class="step-card">
                <div class="step-number">1</div>
                <div class="step-title">CSSÎ°ú Counter ÏÑ§Ï†ï</div>
                <div class="step-code">.counter-container {
    counter-reset: item-counter;
}
.counter-item {
    counter-increment: item-counter;
}
.counter-item::before {
    content: counter(item-counter) ". ";
}</div>
                <div class="step-desc">
                    Îî± 3Ï§Ñ! CSS ÏòàÏïΩÏñ¥Î°ú ÏûêÎèô Î≤àÌò∏ ÏãúÏä§ÌÖú ÏôÑÏÑ±<br>
                    ‚Ä¢ counter-reset: Ïπ¥Ïö¥ÌÑ∞ ÏÉùÏÑ±<br>
                    ‚Ä¢ counter-increment: ÏûêÎèô +1<br>
                    ‚Ä¢ content: Î≤àÌò∏ Ï∂úÎ†•
                </div>
            </div>
            
            <div class="step-card">
                <div class="step-number">2</div>
                <div class="step-title">ÏÇ≠Ï†ú Ïãú thisÏùò Î∂ÄÎ™® Ï∞æÏïÑÏÑú ÎÇ†Î¶¨Í∏∞</div>
                <div class="step-code">function deleteUser(userId, buttonElement) {
    // this(Î≤ÑÌäº)Ïùò Î∂ÄÎ™® Ï∞æÏïÑÏÑú ÏÇ≠Ï†ú
    buttonElement.closest('.user-item').remove();
}</div>
                <div class="step-desc">
                    Îî± 1Ï§Ñ! closest()Î°ú Î∂ÄÎ™® Ï∞æÍ≥† remove()Î°ú ÏÇ≠Ï†ú<br>
                    ‚Ä¢ this = ÌÅ¥Î¶≠Ìïú ÏÇ≠Ï†ú Î≤ÑÌäº<br>
                    ‚Ä¢ closest = Î∂ÄÎ™® Ï§ë .user-item Ï∞æÍ∏∞<br>
                    ‚Ä¢ remove = Ï∞æÏùÄ Î∂ÄÎ™® Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
                </div>
            </div>
            
            <div class="step-card">
                <div class="step-number">3</div>
                <div class="step-title">CSSÍ∞Ä ÏïåÏïÑÏÑú Î≤àÌò∏ Ïû¨Ï†ïÎ†¨</div>
                <div class="step-code">// JavaScriptÍ∞Ä Ìï† Ïùº: ÏóÜÏùå!
// CSS ÏóîÏßÑÏù¥ ÏûêÎèôÏúºÎ°ú:
// 1. ÎÇ®ÏùÄ ÏöîÏÜå Í∞êÏßÄ
// 2. counter Ïû¨Í≥ÑÏÇ∞
// 3. ::before ÎÇ¥Ïö© ÏóÖÎç∞Ïù¥Ìä∏</div>
                <div class="step-desc">
                    Îî± 0Ï§Ñ! CSS ÏóîÏßÑ(C++)Ïù¥ ÏûêÎèô Ï≤òÎ¶¨<br>
                    ‚Ä¢ DOM Î≥ÄÍ≤Ω Í∞êÏßÄ<br>
                    ‚Ä¢ Î≤àÌò∏ ÏûêÎèô Ïû¨Í≥ÑÏÇ∞<br>
                    ‚Ä¢ ÌôîÎ©¥Ïóê Ï¶âÏãú Î∞òÏòÅ
                </div>
            </div>
        </div>
        
        <div class="key-point">
            üí° ÌïµÏã¨: JavaScriptÎäî DOM Ï†úÍ±∞Îßå, <span class="highlight">CSSÍ∞Ä Î≤àÌò∏Î•º Îã§Ïãú Í∑∏Î¶∞Îã§!</span>
        </div>
        
        <!-- ÏôÑÏÑ± ÏΩîÎìú -->
        <div class="complete-code">
            <h2 class="section-title">üìù JSP ÏôÑÏÑ± ÏΩîÎìú</h2>
            
            <div class="code-block">
                <span class="code-label">CSS</span>
                <pre><code>/* ÌïµÏã¨ CSS - Ïù¥Í≤å Ï†ÑÎ∂ÄÏûÖÎãàÎã§! */
.counter-container {
    counter-reset: item-counter;     /* 1. Ïπ¥Ïö¥ÌÑ∞ Ï¥àÍ∏∞Ìôî */
}

.counter-item {
    counter-increment: item-counter; /* 2. Í∞Å ÏïÑÏù¥ÌÖúÎßàÎã§ +1 */
}

.counter-item::before {
    content: counter(item-counter) ". ";  /* 3. Î≤àÌò∏ Ï∂úÎ†• */
    font-weight: bold;
    color: #007bff;
    margin-right: 5px;
}</code></pre>
            </div>
            
            <div class="code-block">
                <span class="code-label">HTML</span>
                <pre><code>&lt;div id="user-list" class="user-list counter-container"&gt;
    &lt;!-- Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞Í∞Ä Ïó¨Í∏∞Ïóê Î†åÎçîÎßÅ --&gt;
&lt;/div&gt;</code></pre>
            </div>
            
            <div class="code-block">
                <span class="code-label">JavaScript</span>
                <pre><code>// Ïú†Ï†Ä Î†åÎçîÎßÅ
data.users.forEach((user) => {
    const userDiv = document.createElement('div');
    userDiv.className = 'counter-item user-item';  // CSS Counter Ï†ÅÏö©
    userDiv.innerHTML = 
        '&lt;div class="user-info"&gt;' +
            '&lt;strong&gt;' + user.username + '&lt;/strong&gt; - ' + user.email +
        '&lt;/div&gt;' +
        '&lt;button onclick="deleteUser(' + user.id + ', this)"&gt;ÏÇ≠Ï†ú&lt;/button&gt;';
    container.appendChild(userDiv);
});

// ÏÇ≠Ï†ú Ìï®Ïàò - ÌïµÏã¨!
async function deleteUser(userId, buttonElement) {
    // ÏÑúÎ≤Ñ ÏÇ≠Ï†ú ÏöîÏ≤≠
    const response = await fetch('/api/users/' + userId, {
        method: 'DELETE'
    });
    
    if (response.ok) {
        // thisÏùò Î∂ÄÎ™® Ï∞æÏïÑÏÑú ÏÇ≠Ï†ú - ÎÅù!
        buttonElement.closest('.user-item').remove();
        // CSSÍ∞Ä ÏïåÏïÑÏÑú Î≤àÌò∏ Ïû¨Ï†ïÎ†¨Ìï®
    }
}</code></pre>
            </div>
        </div>
        
        <!-- ÎùºÏù¥Î∏å Îç∞Î™® -->
        <div class="demo-section">
            <h2 class="section-title">üéÆ ÎùºÏù¥Î∏å Îç∞Î™®</h2>
            
            <div class="demo-controls">
                <button class="demo-btn btn-add" onclick="addUser()">‚ûï Ïú†Ï†Ä Ï∂îÍ∞Ä</button>
                <button class="demo-btn btn-load" onclick="loadUsers(10)">üë• 10Î™Ö Î°úÎìú</button>
                <button class="demo-btn btn-load" onclick="loadUsers(100)">üë• 100Î™Ö Î°úÎìú</button>
                <button class="demo-btn btn-load" onclick="loadUsers(1000)">üë• 1000Î™Ö Î°úÎìú</button>
                <button class="demo-btn btn-reset" onclick="clearUsers()">üîÑ Ï¥àÍ∏∞Ìôî</button>
            </div>
            
            <div class="counter-container" id="userList">
                <!-- Ïú†Ï†ÄÍ∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê® -->
            </div>
            
            <div class="performance-info">
                <div class="perf-item">
                    <div class="perf-label">Ïú†Ï†Ä Ïàò</div>
                    <div class="perf-value" id="userCount">0</div>
                </div>
                <div class="perf-item">
                    <div class="perf-label">Î†åÎçîÎßÅ ÏãúÍ∞Ñ</div>
                    <div class="perf-value"><span id="renderTime">0</span>ms</div>
                </div>
                <div class="perf-item">
                    <div class="perf-label">ÏÇ≠Ï†ú ÏãúÍ∞Ñ</div>
                    <div class="perf-value"><span id="deleteTime">0</span>ms</div>
                </div>
                <div class="perf-item">
                    <div class="perf-label">CSS Ïû¨Í≥ÑÏÇ∞</div>
                    <div class="perf-value good">ÏûêÎèô</div>
                </div>
            </div>
        </div>
        
        <!-- ÎπÑÍµê -->
        <div class="complete-code">
            <h2 class="section-title">‚ö° ÏÑ±Îä• ÎπÑÍµê</h2>
            <table class="comparison-table">
                <thead>
                    <tr>
                        <th>Íµ¨Î∂Ñ</th>
                        <th>JavaScript Î∞©Ïãù</th>
                        <th>CSS Counter Î∞©Ïãù</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><strong>ÏÇ≠Ï†ú Ïãú ÎèôÏûë</strong></td>
                        <td class="bad">Î™®Îì† ÏöîÏÜå ÏàúÌöåÌïòÎ©∞ Î≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏</td>
                        <td class="good">DOM Ï†úÍ±∞Îßå (Î≤àÌò∏Îäî CSSÍ∞Ä Ï≤òÎ¶¨)</td>
                    </tr>
                    <tr>
                        <td><strong>ÏΩîÎìúÎüâ</strong></td>
                        <td class="bad">Î≤àÌò∏ Í¥ÄÎ¶¨ Î°úÏßÅ ÌïÑÏöî</td>
                        <td class="good">CSS 3Ï§Ñ + remove() 1Ï§Ñ</td>
                    </tr>
                    <tr>
                        <td><strong>ÏÑ±Îä• (20,000Î™Ö)</strong></td>
                        <td class="bad">O(n) - ÎäêÎ¶º</td>
                        <td class="good">O(1) - Îπ†Î¶Ñ (C++ ÏóîÏßÑ)</td>
                    </tr>
                    <tr>
                        <td><strong>DOM Ï°∞Ïûë</strong></td>
                        <td class="bad">Î™®Îì† ÏöîÏÜå textContent Î≥ÄÍ≤Ω</td>
                        <td class="good">Ï†úÍ±∞Ìï† ÏöîÏÜåÎßå remove()</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="key-point">
            üéØ Í≤∞Î°†: CSS Counter = <span class="highlight">ÏΩîÎìú Ï†ÅÍ≥†, Îπ†Î•¥Í≥†, ÏûêÎèôÌôî!</span><br>
            "CSSÍ∞Ä Îã§Ïãú Í∑∏Î¶∞Îã§" = JavaScript ÏóÜÏù¥ CSS ÏóîÏßÑÏù¥ ::before ÎÇ¥Ïö©ÏùÑ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
        </div>
    </div>
    
    <script>
        let userIdCounter = 1;
        
        function loadUsers(count) {
            const startTime = performance.now();
            const container = document.getElementById('userList');
            container.innerHTML = '';
            
            for (let i = 1; i <= count; i++) {
                const userDiv = document.createElement('div');
                userDiv.className = 'counter-item user-item';
                userDiv.innerHTML = `
                    <div class="user-info">
                        <strong>user${i}</strong> - user${i}@example.com (ID: ${i})
                    </div>
                    <button class="delete-btn" onclick="deleteUser(this)">ÏÇ≠Ï†ú</button>
                `;
                container.appendChild(userDiv);
            }
            
            const endTime = performance.now();
            document.getElementById('renderTime').textContent = (endTime - startTime).toFixed(2);
            updateCount();
        }
        
        function addUser() {
            const container = document.getElementById('userList');
            const userDiv = document.createElement('div');
            userDiv.className = 'counter-item user-item';
            userDiv.innerHTML = `
                <div class="user-info">
                    <strong>user${userIdCounter}</strong> - user${userIdCounter}@example.com
                </div>
                <button class="delete-btn" onclick="deleteUser(this)">ÏÇ≠Ï†ú</button>
            `;
            container.appendChild(userDiv);
            userIdCounter++;
            updateCount();
        }
        
        function deleteUser(buttonElement) {
            const startTime = performance.now();
            
            // ÌïµÏã¨: thisÏùò Î∂ÄÎ™® Ï∞æÏïÑÏÑú ÏÇ≠Ï†ú
            buttonElement.closest('.counter-item').remove();
            
            const endTime = performance.now();
            document.getElementById('deleteTime').textContent = (endTime - startTime).toFixed(2);
            updateCount();
        }
        
        function clearUsers() {
            document.getElementById('userList').innerHTML = '';
            document.getElementById('renderTime').textContent = '0';
            document.getElementById('deleteTime').textContent = '0';
            userIdCounter = 1;
            updateCount();
        }
        
        function updateCount() {
            const count = document.querySelectorAll('.counter-item').length;
            document.getElementById('userCount').textContent = count;
        }
        
        // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        window.onload = function() {
            loadUsers(5);
        };
    </script>
</body>
</html>